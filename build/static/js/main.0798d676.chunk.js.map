{"version":3,"sources":["components/index.js","App.js","serviceWorker.js","index.js"],"names":["$","ajax","url","dataType","success","response","each","details","i","detail","listPeople","id","name","otherName","Location","job","department","stack","append","document","on","this","attr","selectedPerson","grep","searchAddress","window","open","error","console","log","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+RAmBAA,IAAEC,KAAK,CACHC,IAAK,uDACLC,SAAU,OACVC,QAAS,SAASC,GAEdL,IAAEM,KAAKD,EAASE,SAAQ,SAASC,EAAGC,GAChC,IAAIC,EAAU,iBACAD,EAAOE,GADP,iGACkGF,EAAOG,KADzG,YACiHH,EAAOI,UADxH,+FAGCJ,EAAOE,GAHR,oBAGsBF,EAAOG,KAH7B,YAGqCH,EAAOI,UAH5C,qBAGkEJ,EAAOK,SAHzE,kDAIQL,EAAOM,IAJf,8CAIwDN,EAAOO,WAJ/D,8CAKQP,EAAOQ,MALf,yEASdjB,IAAE,OAAOkB,OAAOR,SAK5BV,IAAEmB,UAAUC,GAAG,QAAS,YAAY,WAEhC,IAAIT,EAAKX,IAAEqB,MAAMC,KAAK,MAItBtB,IAAEC,KAAK,CACHC,IAAK,uDACLC,SAAU,OACVC,QAAS,SAASC,GACd,IAAIkB,EAAiBvB,IAAEwB,KAAKnB,EAASE,SAAS,SAASE,GACnD,OAAOA,EAAOE,IAAMA,KAOpBc,EAFUF,EAAe,GAAGX,KAEF,IADfW,EAAe,GAAGV,UAIjCa,OAAOC,KAAP,0CAA+CF,KAEnDG,MAAO,SAASA,GACZC,QAAQC,IAAIF,SCvCTG,MAnBf,WACE,OACE,yBAAKC,UAAU,OACb,gCACA,wBAAIA,UAAU,iEAAd,sBACA,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,uBCDXC,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpB,SAASqB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnB,GACLC,QAAQD,MAAMA,EAAMoB,c","file":"static/js/main.0798d676.chunk.js","sourcesContent":["import axios from 'axios';\nimport $ from 'jquery';\n\n// const res = axios.get(\"http://localhost:5000/api/test\")\n// console.log(res);\n// Make a request for a user with a given ID\n// axios.get(\"http://localhost:5000/api/test\")\n//   .then(function (response) {\n//     // handle success\n//     console.log(response.data);\n//   })\n//   .catch(function (error) {\n//     // handle error\n//     console.log(error);\n//   })\n//   .finally(function () {\n//     // always executed\n//   });\n\n$.ajax({\n    url: \"https://desolate-sierra-73895.herokuapp.com/api/test\",\n    dataType: \"json\",\n    success: function(response){\n        // debugger;\n        $.each(response.details,function(i, detail){  \n            var listPeople = \n                `<h4 id=${detail.id} class=\"text-center text-uppercase text-primary font-weight-bold font-size-5 explore\">${detail.name} ${detail.otherName}</h4>\n                <section class=\"font-weight-bold\">\n                <p><span>${detail.id}. </span>${detail.name} ${detail.otherName} lives in ${detail.Location}.</p>\n                <p>He work as a ${detail.job} at so so so, in the department of ${detail.department}.\n                <p> He uses the ${detail.stack} as his primary stack. blah blah blah<br>\n                </section>`\n                // <button class=\"btn btn-primary mt-2 explore\">Read More</button>\n                \n            $(\".q2\").append(listPeople);\n        });\n    }\n});\n\n$(document).on(\"click\", \".explore\", function(){\n    // console.log(id);\n    var id = $(this).attr(\"id\");\n    // console.log(id);\n    \n    \n    $.ajax({\n        url: \"https://desolate-sierra-73895.herokuapp.com/api/test\",\n        dataType: \"json\",\n        success: function(response) {\n            var selectedPerson = $.grep(response.details, function(detail){\n                return detail.id == id;\n                \n            })\n            // console.log(selectedPerson);\n            \n            var address = selectedPerson[0].name;\n            var address1 = selectedPerson[0].otherName;\n            var searchAddress = address + \" \" + address1\n            // console.log(searchAddress);\n            \n            window.open(`https://www.google.com/search?q=${searchAddress}`);\n        },\n        error: function(error) {\n            console.log(error);\n            \n        }\n    });\n});\n","import React from 'react';\nimport './App.css';\nimport './components/user';\nimport './components/index';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n      <h1 className=\"text-center font-weight-bold text-primary text-uppercase mt-3\">list of developers</h1>\n      <div className=\"container mt-3\">  \n        <div className=\"jumbotron\">\n            <div className=\"row\"> \n                <div className=\"col-md-12 q2\">\n\n                </div>\n            </div>\n        </div>\n      </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}